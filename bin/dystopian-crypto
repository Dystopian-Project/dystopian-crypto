#!/bin/sh
# shellcheck shell=sh
# shellcheck disable=SC2001

if [ "$(id -u)" -ne 0 ]; then
    echo "User must be root"
    exit 1
fi

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
VAR_LIB_FILE="/usr/local/lib/dystopian-tools/variables.sh"
DB_LIB_FILE="/usr/local/lib/dystopian-tools/crypto-db.sh"
HELPER_LIB_FILE="/usr/local/lib/dystopian-tools/helper.sh"
SSL_LIB_FILE="/usr/local/lib/dystopian-tools/ssl.sh"
GPG_LIB_FILE="/usr/local/lib/dystopian-tools/gpg.sh"
HOSTS_LIB_FILE="/usr/local/lib/dystopian-tools/hosts.sh"
SECBOOT_LIB_FILE="/usr/local/lib/dystopian-tools/secboot.sh"


[ -f "$VAR_LIB_FILE" ] || VAR_LIB_FILE="$SCRIPT_DIR/../lib/variables.sh"
[ -f "$DB_LIB_FILE" ] || DB_LIB_FILE="$SCRIPT_DIR/../lib/crypto-db.sh"
[ -f "$HELPER_LIB_FILE" ] || HELPER_LIB_FILE="$SCRIPT_DIR/../lib/helper.sh"
[ -f "$SSL_LIB_FILE" ] || SSL_LIB_FILE="$SCRIPT_DIR/../lib/ssl.sh"
[ -f "$GPG_LIB_FILE" ] || GPG_LIB_FILE="$SCRIPT_DIR/../lib/gpg.sh"
[ -f "$SECBOOT_LIB_FILE" ] || SECBOOT_LIB_FILE="$SCRIPT_DIR/../lib/secboot.sh"
[ -f "$HOSTS_LIB_FILE" ] || HOSTS_LIB_FILE="$SCRIPT_DIR/../lib/hosts.sh"

# Source library files
# shellcheck source=../lib/variables.sh
[ -f "$VAR_LIB_FILE" ] && . "$VAR_LIB_FILE"
# shellcheck source=../lib/crypto-db.sh
[ -f "$DB_LIB_FILE" ] && . "$DB_LIB_FILE"
# shellcheck source=../lib/helper.sh
[ -f "$HELPER_LIB_FILE" ] && . "$HELPER_LIB_FILE"
# shellcheck source=../lib/ssl.sh
[ -f "$SSL_LIB_FILE" ] && . "$SSL_LIB_FILE"
# shellcheck source=../lib/gpg.sh
[ -f "$GPG_LIB_FILE" ] && . "$GPG_LIB_FILE"
#shellcheck source=../lib/secboot.sh
[ -f "$SECBOOT_LIB_FILE" ] && . "$SECBOOT_LIB_FILE"
#shellcheck source=../lib/hosts.sh
[ -f "$HOSTS_LIB_FILE" ] && . "$HOSTS_LIB_FILE"
#trap on_error_or_exit && exit 1 INT TERM HUP
trap on_exit EXIT


help() {
    echo "Usage: $0 <command> [subcommand] [options]"
    echo ""
    echo "A POSIX shell script to manage SSL certificates and GPG keys with strong encryption"
    echo "and Argon2id key derivation for people who always forget OpenSSL syntax."
    echo ""
    echo "SSL COMMANDS:"
    echo "============="
    echo ""
    echo "  ssl create-ca                       Create a Root or Intermediate Certificate Authority"
    echo "    --name <string>                     (Required) Common Name (CN) for the CA"
    echo "    --outcert <file>                    (Optional) Output certificate file (default: ca.pem or intermediate-ca.pem)"
    echo "    --outkey <file>                     (Optional) Output private key file (default: ca-key.pem or intermediate-ca-key.pem)"
    echo "    --intermediate                      (Optional) Create intermediate CA instead of root CA"
    echo "    --password <file|string>            (Optional) Password for private key encryption. Default: Argon2id"
    echo "    --email <string>                    (Optional) Email address for certificate"
    echo "    --country <string>                  (Optional) Country code (e.g., US, DE)"
    echo "    --state <string>                    (Optional) State or province (ST)"
    echo "    --locality <string>                 (Optional) City or locality (C)"
    echo "    --org <string>                      (Optional) Organization name (O)"
    echo "    --orgunit <string>                  (Optional) Organizational unit (OU)"
    echo "    --days <number>                     (Optional) Certificate validity in days. Default: 3650"
    echo ""
    echo "  ssl create-key                      Create a private key with optional Argon2id encryption"
    echo "    --out <file|stdout>                 (Optional) Output file. Default: $DC_KEY/key.pem"
    echo "    --password <file|string>            (Optional) Password for encryption. Default: Argon2id"
    echo "    --salt <file|string>                (Optional) Custom salt (auto-generated if not provided)"
    echo ""
    echo "  ssl create-csr                      Create a Certificate Signing Request"
    echo "    --keyname|--name                    (Optional) Name of key in database"
    echo "    --domains <string>                  (Required for server certs) Comma-separated domains/IPs"
    echo "    --key <file>                        (Required) Private key file"
    echo "    --cn <string>                       (Required for client certs) Common Name"
    echo "    --out <file>                        (Optional) Output CSR file"
    echo "    --server                            (Optional) Creates CSR for a server certificate. Default: false"
    echo "    --client                            (Optional) Creates CSR for a client certificate. Default: true"
    echo "    --pass <file|string>                (Optional) Private key password"
    echo "    --email <string>                    (Optional) Email address"
    echo "    --country <string>                  (Optional) Country code"
    echo "    --state <string>                    (Optional) State or province"
    echo "    --locality <string>                 (Optional) City or locality"
    echo "    --org <string>                      (Optional) Organization name"
    echo "    --orgunit <string>                  (Optional) Organizational unit"
    echo "    --crldist <url>                     (Optional) CRL distribution point URL"
    echo ""
    echo "  ssl sign-csr                        Sign a Certificate Signing Request"
    echo "    --name|--csrname                    (Optional) Name of CSR in database"
    echo "    --csr <file>                        (Required) CSR file to sign"
    echo "    --ca-cert <file>                    (Optional) CA certificate file. Default: defaultCA"
    echo "    --ca-key <file>                     (Optional) CA private key file. Default: defaultCA"
    echo "    --out <file>                        (Optional) Output certificate file"
    echo "    --ca-pass <file|string>             (Optional) CA private key password"
    echo "    --days <number>                     (Optional) Certificate validity in days"
    echo "    --keep-csr                          (Optional) Keep CSR file after signing"
    echo "    --keep-cfg                          (Optional) Keep configuration file after signing"
    echo ""
    echo "  ssl verify-cert                     Verify certificate signature and validity"
    echo "    --cert <file>                       (Required) Certificate file to verify"
    echo "    --ca <file>                         (Required) CA certificate for verification"
    echo "    --chain <file>                      (Optional) Certificate chain file"
    echo ""
    echo "  ssl list-ca                         List Certificate Authorities"
    echo "    --type <all|root|intermediate>      (Optional) CA type to list (default: all)"
    echo "    --verbose                           (Optional) Show detailed information"
    echo ""
    echo "  ssl show-ca                         Show detailed CA information"
    echo "    --index <index>                     (Required) CA index to show"
    echo "    --type <root|intermediate>          (Optional) CA type (default: root)"
    echo "    --cert                              (Optional) Show certificate details"
    echo ""
    echo "  ssl encrypt                         Encrypt data using certificate"
    echo "    --cert <file>                       (Required) Certificate file for encryption"
    echo "    --in <file>                         (Required) Input file to encrypt"
    echo "    --out <file>                        (Required) Output encrypted file"
    echo ""
    echo "  ssl decrypt                         Decrypt data using private key"
    echo "    --in <file|stdin>                   (Required) Input encrypted file"
    echo "    --pass <file|string>                (Required) Passphrase to decrypt input file"
    echo "    --key <file>                        (Optional) Private key file for decryption"
    echo "    --out <file>                        (Optional) Output decrypted file. Default: stdout"
    echo ""
    echo "  ssl create-crl                      Create Certificate Revocation List"
    echo "    --ca-key <file>                     (Optional) CA private key file. Default: defaultCA"
    echo "    --ca-cert <file>                    (Optional) CA certificate file. Default: defaultCA"
    echo "    --out <file>                        (Optional) Output CRL file. Default: $DC_CRL/<file>.crl"
    echo "    --ca-pass <file|string>             (Optional) CA private key password"
    echo "    --days <number>                     (Optional) CRL validity in days. Default: "
    echo ""
    echo "  ssl revoke-cert                     Revoke a certificate"
    echo "    --cert <file>                       (Required) Certificate file to revoke"
    echo "    --ca-key <file>                     (Required) CA private key file"
    echo "    --ca-cert <file>                    (Required) CA certificate file"
    echo "    --ca-pass <file|string>             (Optional) CA private key password"
    echo "    --reason <reason>                   (Optional) Revocation reason"
    echo ""
    echo "  ssl create-config                   Create SSL configuration file for OpenSSL operations"
    echo "    --type <rootca|intca|client|server> (Required) Certificate type to generate config for"
    echo "    --domains-ips <string>              (Optional) Comma-separated domains/IPs (for server certs)"
    echo "    --email <string>                    (Optional) Email address for certificate"
    echo "    --country <string>                  (Optional) Country code (e.g., US, DE)"
    echo "    --state <string>                    (Optional) State or province"
    echo "    --locality <string>                 (Optional) City or locality"
    echo "    --organization <string>             (Optional) Organization name"
    echo "    --orgunit <string>                  (Optional) Organizational unit"
    echo "    --common-name <string>              (Optional) Common Name (CN) for the certificate"
    echo "    --crldistributionpoint <string>     (Optional) CRL distribution point URL"
    echo ""
    echo ""
    echo "GPG COMMANDS:"
    echo "============="
    echo ""
    echo "  gpg import                          Import GPG key to keyring"
    echo "    --key <file>                        (Required) Key file to import"
    echo "    --armor                             (Optional) Import ASCII armored key"
    echo ""
    echo "  gpg export                          Export GPG key from keyring"
    echo "    --public <keyid>                    (Required) Export public key (or --private)"
    echo "    --private <keyid>                   (Required) Export private key (or --public)"
    echo "    --out <file>                        (Required) Output file"
    echo "    --armor                             (Optional) Export in ASCII armor format"
    echo ""
    echo "  gpg genpair                         Generate GPG key pair"
    echo "    --name <name>                       (Required) Real name for key"
    echo "    --email <email>                     (Required) Email address for key"
    echo "    --comment <comment>                 (Optional) Comment for key"
    echo "    --keysize <bits>                    (Optional) Key size in bits (default: 4096)"
    echo "    --expire <date>                     (Optional) Expiration date (0 = never)"
    echo ""
    echo "  gpg addsub                          Add subkey to Primary Key"

    echo ""
    echo ""
    echo "SECUREBOOT COMMANDS:"
    echo "============="
    echo ""
    echo "  secboot init                        Initialize secureboot keys (either active ones, or creates new ones)"
    echo ""
    echo "  secboot verify                      Verify all Kernel Images in /boot/efi/EFI/Linux are signed"
    echo ""
    echo ""
    echo "MAINTENANCE COMMANDS:"
    echo "===================="
    echo ""
    echo "  show-index                      Show SSL index information"
    echo "    --keys                              (Optional) Show key entries"
    echo "    --ca                                (Optional) Show CA entries"
    echo "    --verbose                           (Optional) Show detailed information"
    echo "    --json                              (Optional) Output raw JSON index"
    echo ""
    echo "  cleanup                             Clean up dystopian-crypto files and index"
    echo "    --index <index>                     (Optional) Clean up specific index entry"
    echo "    --orphaned                          (Optional) Remove orphaned files not in index"
    echo "    --backups                           (Optional) Remove backup files"
    echo "    --dry-run                           (Optional) Show what would be cleaned without doing it"
    echo ""
    echo "  backup                              Create backup of dystopian-crypto directory"
    echo "    --out <file>                        (Optional) Backup output file (default: /tmp/dystopian-crypto-backup-YYYYMMDD_HHMMSS.tar)"
    echo "    --compress                          (Optional) Compress backup with gzip"
    echo "    --exclude-keys                      (Optional) Exclude private keys from backup"
    echo ""
    echo "  restore                             Restore dystopian-crypto directory from backup"
    echo "    --from <file>                       (Required) Backup file to restore from"
    echo "    --force                             (Optional) Force restore without confirmation"
    echo ""
    echo "  set-default-ca                      Set default Certificate Authority"
    echo "    --index <index>                     (Required) CA index to set as default"
    echo "    --type <root|intermediate>          (Optional) CA type (default: root)"
    echo ""
    echo "  install                             Creates keys and certs and Integrates them in corresponding environment"
    echo "    --docker-client-cert                 "
    echo "    --docker-server-cert                 "
    echo ""
    echo ""
    echo "OTHER COMMANDS:"
    echo "==============="
    echo "  -v | --verbose                      Show verbose status informations"
    echo "  -q | --quiet                        No output informations"
    echo "  --user <name>                       Give group ownership to user"
    echo "  --debug                             Show debug status informations"
    echo "  version                             Show version information"
    echo "  help                                Show this help message"
    echo ""
    echo ""
    echo "EXAMPLES:"
    echo "========="
    echo ""
    echo "  # Create a root CA with encrypted private key"
    echo "  $0 ssl create-ca --name \"My Root CA\" --password mypassword"
    echo ""
    echo "  # Create a server certificate CSR"
    echo "  $0 ssl create-csr --domains \"example.com,192.168.1.100\" --type server --key my.key --cn example.com"
    echo ""
    echo "  # List all Certificate Authorities"
    echo "  $0 ssl list-ca --verbose"
    echo ""
    echo "  # Create encrypted backup"
    echo "  $0 backup --compress --out /secure/dystopian-crypto-backup.tar.gz"
    echo ""
    echo ""
    echo "SSL FILES:"
    echo "  Configuration directory: $DC_DIR/"
    echo "  CA certificates:         $DC_CA/"
    echo "  CA private keys:         $DC_CAKEY/"
    echo "  Certificates:            $DC_CERT/"
    echo "  Private keys:            $DC_KEY/"
    echo "  CRL files:               $DC_CRL/"
    echo ""
    echo "GPG FILES:"
    echo "  GPG Home Directory:      $DC_GNUPG/"
    echo ""
    echo "DATABASE:"
    echo "  SSL/GnuPG database file: $DC_DB"
    echo ""
    echo ""
    echo "NOTES:"
    echo "  • This script requires root privileges"
    echo "  • SSL private keys use secp384r1 elliptic curve (384-bit)"
    echo "  • SSL Certificates use SHA-384 for signatures"
    echo "  • Password-protected keys use Argon2id key derivation, fallback to pbkdf2"
    echo "  • All operations are logged in the JSON database for tracking"
    echo "  • Use 'show-index --json' to see the complete configuration"
}

main() {
    # Check verbose
    new_args=""

    # Preprocess arguments to check for --verbose, -v, or --debug
    while [ $# -gt 0 ]; do
        # shellcheck disable=SC2034
        case "$1" in
            --verbose|-v) VERBOSE=1; shift;;
            --quiet|-q) DEBUG=0 VERBOSE=0 QUIET=1; shift;;
            --debug) DEBUG=1; VERBOSE=1; shift;;
            --user|-u) DC_USER="$2"; shift 2;;
            *)
                # Append argument to new_args string, preserving spaces
                if [ -z "$new_args" ]; then
                    new_args="$1"
                else
                    new_args="$new_args $1"
                fi
                shift
                ;;
        esac
    done

    # Restore the modified argument list
    eval set -- "$new_args"

    case "$1" in
        ssl)
            shift
            case "$1" in
                import)
                    shift
                    index="" import="" scan_depth=""
                    copy_files="" move_files=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --import*file|--import|-i) import="$2"; shift 2;;
                            --import*dir) import="$2"; shift 2;;
                            --scan-depth) scan_depth="$2"; shift 2;;
                            --copy-files) copy_files="true"; shift;;
                            --move-files) move_files="true"; shift;;
                        esac
                    done
                    import_ssl "$index" \
                        "$import" "$scan_depth" \
                        "$copy_files" "$move_files"
                    ;;

                kdf)
                    shift
                    password="" salt="" no_argon=0
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --pass) password="$2"; shift 2;;
                            --salt) salt="$2"; shift 2;;
                            --pbkdf2|--no-argon) no_argon=1;;
                            -h|--help|-help) shorthelp "ssl kdf"; exit 0;;
                            *) echoe "Unknown command: $1"; shorthelp "ssl kdf"; exit 1;;
                        esac
                    done
                    [ "$no_argon" -eq 0 ] && _create_argon2id_derived_key_pw "$password" "$salt"
                    #[ "$no_argon" -ne 0 ] && _create_pbkdf2_derived_key_pw "$password"
                    ;;

                create-ca)
                    shift
                    ca_name="" ca_cert_out="" ca_key_out="" ca_pass=""
                    ca_salt_out="" no_argon="" ca_conf_out="" ca_csr_out=""
                    keep_ca_csr="" intermediate="" root_ca_index="" root_ca_key=""
                    root_ca_cert="" root_ca_pass="" root_ca_salt="" root_no_argon=""
                    email="" country="" state="" locality="" organization=""
                    orgunit="" days="" set_as_default=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --cert*out|--cert) ca_cert_out="$2"; shift 2 ;;
                            --keyout|--key) ca_key_out="$2"; shift 2 ;;
                            --ca*name|--name|-CN|--CN) ca_name="$2"; shift 2 ;;
                            --intermediate) intermediate=true; shift;;
                            --cfg|--config|--config*out|--cfg*out) ca_conf_out="$2"; shift 2;;
                            --csr|--csr*out) ca_csr_out="$2"; shift 2;;
                            --keep*csr|--keep) keep_ca_csr=false; shift;;
                            --set*as*default|--set*default|--set*default*CA) set_as_default=true; shift;;
                            --root*ca*name|--rn|-rn) root_ca_index="$2"; shift 2;;
                            --root*ca*key|--rk|-rk) root_ca_key="$2"; shift 2;;
                            --root*ca*cert|--rc|-rc) root_ca_cert="$2"; shift 2;;
                            --root*ca*pass|--root*ca*pass*word|--root*ca*pass*file|--rp|-rp|--rpf|-rpf) root_ca_pass="$2"; shift 2;;
                            --root*ca*salt|--rs|-rs) root_ca_salt="$2"; shift 2;;
                            --password|--pass|--pass*file) ca_pass="$2"; shift 2;;
                            --salt*out|--salt) ca_salt_out="$2"; shift 2;;
                            --no*argon|--pbkdf2) no_argon="true"; shift;;
                            --email|-E) email="$2"; shift 2;;
                            --country|-C) country="$2"; shift 2;;
                            --state|-ST|--ST) state="$2"; shift 2;;
                            --locality|-L) locality="$2"; shift 2;;
                            --org|-O) organization="$2"; shift 2;;
                            --orgunit|-OU) orgunit="$2"; shift 2;;
                            --days) days="$2"; shift 2;;
                            -h|--help|-help) shorthelp "ssl create-ca"; exit 0;;
                            *) echoe "Unknown command: $1"; shorthelp "ssl create-ca"; exit 1;;
                        esac
                    done
                    create_certificate_authority \
                        "$ca_name" "$ca_key_out" "$ca_cert_out" \
                        "$ca_pass" "$ca_salt_out" "$no_argon" \
                        "$ca_conf_out" "$ca_csr_out" "$keep_ca_csr" \
                        "$intermediate" "$email" "$country" "$state" \
                        "$locality" "$organization" "$orgunit" "$days" \
                        "$root_ca_index" "$root_ca_key" "$root_ca_cert" \
                        "$root_ca_pass" "$root_ca_salt" "$root_no_argon" \
                        "$set_as_default"
                    ;;

                create-key)
                    shift
                    key_name="" key_out="" password=""
                    salt_out="" no_argon=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                          --name|--key*name) key_name="$2"; shift 2;;
                          --out|--key|--key*out) key_out="$2"; shift 2;;
                          --password|--pass) password="$2"; shift 2;;
                          --salt|--salt*out) salt_out="$2"; shift 2;;
                          --noargon|--no*argon|--pbkdf2) no_argon=true; shift;;
                          -h|--help|-help) shorthelp "ssl create-key"; exit 0;;
                          *) echoe "Unknown command: $1" && shorthelp "ssl create-key"; exit 1;;
                        esac
                    done
                    create_private_key \
                        "$key_name" "$key_out" \
                        "$password" "$salt_out" \
                        "$no_argon"
                    ;;

                create-csr)
                    shift
                    key_name="" key_file="" csr_out="" cfg_out="" domains=""
                    ips="" common_name="" client="true" server="false" password="" salt=""
                    email="" crldist="" country="" state="" locality="" organization="" orgunit=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --key*name|--name) key_name="$2"; shift 2;;
                            --key|-k|-pk|--privatekey) key_file="$2"; shift 2;;
                            --out|-o|--csr*out) csr_out="$2"; shift 2;;
                            --cfg*out|--cfg|--config|-c) cfg_out="$2"; shift 2;;
                            --domains|--domain|-d) domains="$2"; shift 2;;
                            --ips|-i|--ip) ips="$2"; shift 2;;
                            --cn|-cn|--CN|-CN|--common*name) common_name="$2"; shift 2;;
                            --client) client="true" server="false"; shift;;
                            --server) server="true" client="false"; shift;;
                            --pass|-p|--pw*file|--pfile) password="$2"; shift 2;;
                            --salt|-s|--salt*file) salt="$2"; shift 2;;
                            --mail|-m|-E|-e) email="$2"; shift 2;;
                            --crldist|--crl) crldist="$2"; shift 2;;
                            --country|-C) country="$2"; shift 2;;
                            --state|-S) state="$2"; shift 2;;
                            --locality|-L) locality="$2"; shift 2;;
                            --org|-O) organization="$2"; shift 2;;
                            --orgunit|-OU|--OU) orgunit="$2"; shift 2;;
                            -h|--help|-help) shorthelp "ssl create-csr"; exit 0;;
                            *) echoe "Unknown command: $1"; shorthelp "ssl create-csr"; exit 1;;
                        esac
                    done
                    create_certificate_signing_request \
                        "$key_name" "$key_file" "$password" "$salt" \
                        "$csr_out" "$cfg_out" "$domains" "$ips" \
                        "$client" "$server" "$email" "$country" \
                        "$state" "$locality" "$organization" "$orgunit" \
                        "$common_name" "$crldist"
                    ;;

                sign-csr|create-cert)
                    shift
                    csr_name="" csr_file="" cert_out="" ca_name=""
                    ca_cert_file="" ca_key_file="" ca_pass="" ca_salt=""
                    validity_days="" keep_csr="" keep_cfg="" config_file=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --key*name|--name) csr_name="$2"; shift 2;;
                            --csr) csr_file="$2"; shift 2;;
                            --ca*cert) ca_cert_file="$2"; shift 2;;
                            --ca*key) ca_key_file="$2"; shift 2;;
                            --out|--cert|--cert*out) cert_out="$2"; shift 2;;
                            --ca*pass|--pass) ca_pass="$2"; shift 2;;
                            --cfg*file|--config|--config*file|--cfg) config_file="$2"; shift 2;;
                            --ca*salt|--salt) ca_salt="$2"; shift 2;;
                            --days) validity_days="$2"; shift 2;;
                            --keep) keep_csr="true"; keep_cfg="true"; shift;;
                            --keep*csr) keep_csr="true"; shift;;
                            --keep*cfg) keep_cfg="true"; shift;;
                            -h|--help|-help) shorthelp "ssl sign-csr"; exit 0;;
                            *) echoe "Unknown command: $1"; shorthelp "ssl sign-csr"; exit 1;;
                        esac
                    done
                    sign_certificate_request \
                        "$csr_name" "$csr_file" "$cert_out" \
                        "$ca_name" "$ca_cert_file" "$ca_key_file" \
                        "$ca_pass" "$ca_salt" "$validity_days" \
                        "$keep_csr" "$keep_cfg" "$config_file"
                    ;;

                set-as-default-CA|set-as-default)
                    shift
                    index=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --index|-i|-idx|--idx) index="$2"; shift 2;;
                        esac
                    done
                    set_as_default_CA "$index"
                    ;;

                verify-cert)
                    shift
                    cert_file="" ca_cert=""
                    cert_chain="" check_expiry="true"
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --cert) cert_file="$2"; shift 2;;
                            --ca) ca_cert="$2"; shift 2;;
                            --chain) cert_chain="$2"; shift 2;;
                            --no-check-expiry) check_expiry="false"; shift;;
                            -h|--help|-help) shorthelp "ssl verify-cert"; exit 0;;
                            *) echoe "Unknown command: $1"; shorthelp "ssl verify-cert"; exit 1;;
                        esac
                    done
                    verify_certificate \
                        "$cert_file" "$ca_cert" \
                        "$cert_chain" "$check_expiry"
                    ;;

                list-ca)
                    shift
                    ca_list_type=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --type) ca_list_type="$2"; shift 2;; 
                            -h|--help|-help) shorthelp "ssl list-ca"; exit 0;;
                            *) echoe "Unknown option for list-ca: $1"; exit 1;;
                        esac
                    done
                    list_certificate_authorities "$ca_list_type"
                    ;;

                show-ca)
                    shift
                    ca_show_index=""
                    ca_show_type=""
                    show_cert_details=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --index) ca_show_index="$2"; shift 2;;
                            --type) ca_show_type="$2"; shift 2;;
                            --cert) show_cert_details="true"; shift;;
                            -h|--help|-help) shorthelp "ssl show-ca"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "ssl show-ca"; exit 1;;
                        esac
                    done
                    show_certificate_authority "$ca_show_index" "$ca_show_type" "$show_cert_details"
                    ;;

                encrypt)
                    shift
                    cert_file="" input="" output=""
                    password="" asymmetric=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --cert) cert_file="$2"; shift 2;;
                            --in) input="$2"; shift 2;;
                            --out) output="$2"; shift 2;;
                            --pass) password="$2"; shift 2;;
                            --asymmetric) asymmetric="true"; shift;;
                            -h|--help|-help) shorthelp "ssl encrypt"; exit 0;;
                            *) echoe "Unknown option for encrypt: $1";  shorthelp "ssl encrypt"; exit 1;;
                        esac
                    done
                    ssl_encrypt "$cert_file" "$input" "$output" "$password" "$asymmetric"
                    ;;

                decrypt)
                    shift
                    key_file="" input="" output="stdout"
                    password="" asymmetric="false"
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --key) key_file="$2"; shift 2 ;;
                            --in) input="$2"; shift 2 ;;
                            --out) output="$2"; shift 2 ;;
                            --pass) password="$2"; shift 2 ;;
                            --symmetric) asymmetric="true"; shift;;
                            -h|--help|-help) shorthelp "ssl decrypt"; exit 0;;
                            *) echoe "Unknown option for decrypt: $1"; shorthelp "ssl decrypt"; exit 1;;
                        esac
                    done
                    ssl_decrypt "$key_file" "$input" "$output" "$password" "$asymmetric"
                    ;;

                create-crl)
                    shift
                    ca_name="" ca_key_file="" ca_cert_file=""
                    ca_pass="" ca_salt="" crl_outfile=""
                    crl_days=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --ca-name) ca_name="$2"; shift 2;;
                            --ca-key) ca_key_file="$2"; shift 2;;
                            --ca-cert) ca_cert_file="$2"; shift 2;;
                            --out) crl_outfile="$2"; shift 2;;
                            --ca-pass|--pass) ca_pass="$2"; shift 2;;
                            --days) crl_days="$2"; shift 2;;
                            -h|--help|-help) shorthelp "ssl create-crl"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "ssl create-crl"; exit 1;;
                        esac
                    done
                    create_certificate_revocation_list \
                        "$ca_key_file" "$ca_cert_file" \
                        "$crl_outfile" "$ca_pass" "$crl_days"
                    ;;

                revoke-cert)
                    shift
                    cert_file="" ca_name="" ca_key_file=""
                    ca_cert_file="" ca_pass="" reason=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --cert) cert_file="$2"; shift 2;;
                            --ca-name) ca_name="$2"; shift 2;;
                            --ca-key) ca_key_file="$2"; shift 2;;
                            --ca-cert) ca_cert_file="$2"; shift 2;;
                            --ca-pass|--pass) ca_pass="$2"; shift 2;;
                            --reason) reason="$2"; shift 2;;
                            -h|--help|-help) shorthelp "ssl revoke-cert"; exit 0;;
                            *) echo "Unknown option: $1"; shorthelp "ssl revoke-cert"; exit 1;;
                        esac
                    done
                    revoke_certificate \
                        "$cert_file" "$ca_key_file" \
                        "$ca_cert_file" "$ca_pass" "$reason"
                    ;;

                create-config)
                    shift
                    type="" domains="" ips="" email=""
                    country="" state="" locality="" org=""
                    orgunit="" common_name="" crldist=""
                    cfg_out=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --out|--cfg*out|--cfg) cfg_out="$2"; shift 2;;
                            --type|-t) type="$2"; shift 2;;
                            --domains|-d|--domain) domains="$2"; shift 2;;
                            --ips|-i|--ip) ips="$2"; shift 2;;
                            --email|-E) email="$2"; shift 2;;
                            --country|-C) country="$2"; shift 2;;
                            --state|--ST|-ST) state="$2"; shift 2;;
                            --locality|-L) locality="$2"; shift 2;;
                            --organization|-O) org="$2"; shift 2;;
                            --orgaunit|-OU|--OU) orgunit="$2"; shift 2;;
                            --common-name|-CN|--CN) common_name="$2"; shift 2;;
                            --crldistributionpoint|--crldist) crldist="$2"; shift 2;;
                            -help|--help|-h) shorthelp "ssl create-config"; exit 0;;
                            *) echo "Unknown option: $1"; shorthelp "ssl create-config"; exit 1;;
                        esac
                    done
                    create_sslconfig \
                        "$type" "$domains,$ips" "$email" \
                        "$country" "$state" "$locality" \
                        "$org" "$orgunit" "$common_name" \
                        "$crldist" "$cfg_out"
                    ;;

                set-default-ca|--set-default-ca)
                    shift
                    default_ca_index=""
                    default_ca_type=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --index) default_ca_index="$2"; shift 2;;
                            --type) default_ca_type="$2"; shift 2;;
                            -help|--help|-h) shorthelp "ssl set-default-ca"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "ssl set-default-ca"; exit 1;;
                        esac
                    done
                    set_default_ca "$default_ca_index" "$default_ca_type"
                    ;;

                install)
                    shift
                    client=""
                    server=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --docker-client-cert) client=true; shift;;
                            --docker-server-cert) server=true; shift;;
                            -help|--help|-h) shorthelp "ssl install"; exit 0;;
                            *) echo "Unknown option: $1"; shorthelp "ssl install"; exit 1;;
                        esac
                    done
                    install_docker_cert "$client" "$server"
                    ;;

                -h|--help|-help) help; exit 0;;
                *) echoe "Unknown SSL command: $1"; help; exit 1;;
            esac
            ;;

        gpg)
            shift
            case "$1" in
                import)
                    shift
                    import_path="" index="" scan_depth=""
                    passphrase="" remove_keys="" homedir=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --file|--dir|-d|-f) import_path="$2"; shift 2;;
                            --index|-i) index="$2"; shift 2;;
                            --pass*file|--pass|-p|-pf|--pf) passphrase="$2"; shift 2;;
                            --scan*depth|-sd|--sd) scan_depth="$2"; shift 2;;
                            --homedir|--home) homedir="$2"; shift 2;;
                            --delete|--del|-del) remove_keys="true"; shift;;
                            -h|--help|-help) shorthelp "gpg import"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "gpg import"; exit 1;;
                        esac
                    done
                    gpg_import_keys \
                        "$import_path" "$passphrase" \
                        "$scan_depth" "$index" \
                        "$remove_keys" "$homedir"
                    ;;

                export)
                    shift
                    fingerprint="" name_real="" key_id=""
                    public_key_out="" private_key_out="" index=""
                    output_dir="" no_armor="" with_subkeys=""
                    homedir="" passphrase="" openssl_encrypt=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --fingerprint|--fp|-fp) fingerprint="$2"; shift 2;;
                            --with-subkeys|--subs|--subkeys|--allsubs|--all-subkeys) with_subkeys="true"; shift;;
                            --name|-n) name_real="$2"; shift 2;;
                            --key-id|-k|--kid|-kid) key_id="$2"; shift 2;;
                            --index|-i) index="$2"; shift 2;;
                            --passphrase|--pass|--pass*file|--pf|-pf) passphrase="$2"; shift 2;;
                            --public|--pub|-p) public_key_out="$2"; shift 2;;
                            --homedir|-h|-hd|--hd) homedir="$2"; shift 2;;
                            --no-openssl-encrypt|--no-ssl-encrypt|--no-encrypt|-ne|--ne|--noenc) openssl_encrypt="false"; shift;;
                            --private|--priv|--secret|--sec|-s) private_key_out="$2"; shift 2;;
                            --out|--dir|--outdir|--od|-od|-o) output_dir="$2"; shift 2;;
                            --no-armor|--na|-na|--binary|--bin|-b) no_armor="true"; shift;;
                            --help|-help) shorthelp "gpg export"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "gpg export"; exit 1;;
                        esac
                    done
                    gpg_export_keypair \
                        "$fingerprint" "$name_real" \
                        "$key_id" "$index" "$no_armor" \
                        "$homedir" "$output_dir" \
                        "$public_key_out" "$private_key_out" \
                        "$with_subkeys" "$passphrase" \
                        "$openssl_encrypt"
                    ;;

                genpair)
                    shift
                    private_key_out="" public_key_out=""
                    name_real="" name_email="" name_comment=""
                    expiry_date="" homedir="" sign="" no_subs=""
                    passphrase="" auth="" encrypt="" index=""
                    sname_real="" sname_email="" sname_comment=""
                    spassphrase="" sexpiry_date=""
                    ename_real="" ename_email="" ename_comment=""
                    epassphrase="" eexpiry_date=""
                    aname_real="" aname_email="" aname_comment=""
                    apassphrase="" aexpiry_date=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --home|--homedir) homedir="$2"; shift 2;;
                            --name|-n) name_real="$2"; shift 2;;
                            --email|-e|--mail) name_email="$2"; shift 2;;
                            --comment|-c) name_comment="$2"; shift 2;;
                            --ename|-en|--en) ename_real="$2"; shift 2;;
                            --eemail|-ee|--ee) ename_email="$2"; shift 2;;
                            --ecomment|-ec|--ec) ename_comment="$2"; shift 2;;
                            --aname|-an|--an) aname_real="$2"; shift 2;;
                            --aemail|-ae|--ae|--amail) aname_email="$2"; shift 2;;
                            --acomment|-ac|--ac) aname_comment="$2"; shift 2;;
                            --sname|-sn|--sn) sname_real="$2"; shift 2;;
                            --semail|-se|--se|--smail) sname_email="$2"; shift 2;;
                            --scomment|-sc|--sc) sname_comment="$2"; shift 2;;
                            --passphrase|--pass|--pass*file|-p|--pf|-pf) passphrase="$2"; shift 2;;
                            --spassphrase|--spass|--spass*file|-sp|--spf|-spf) spassphrase="$2"; shift 2;;
                            --epassphrase|--epass|--epass*file|-ep|--epf|-epf) epassphrase="$2"; shift 2;;
                            --apassphrase|--apass|--apass*file|-ap|--apf|-apf) apassphrase="$2"; shift 2;;
                            --encrypt|--enc) encrypt="true"; shift;;
                            --sign) sign="true"; shift;;
                            --auth) auth="true"; shift;;
                            --expire) expiry_date="$2"; shift 2;;
                            --no-subs) no_subs="true"; shift;;
                            --index|-i) index="$2"; shift 2;;
                            -h|--help|-help) echoe "gpg genpair" && shorthelp "gpg genpair"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "gpg genpair"; exit 1;;
                        esac
                    done
                    gpg_create_keypair \
                        "$name_real" "$passphrase" "$name_email" \
                        "$name_comment" "$expiry_date" "$homedir" \
                        "$sign" "$auth" "$encrypt" \
                        "$index" "$no_subs" "$sname_real" "$sname_email" \
                        "$sname_comment" "$sexpiry_date" "$spassphrase" \
                        "$ename_real" "$ename_email" "$ename_comment" \
                        "$eexpiry_date" "$epassphrase" "$aname_real" \
                        "$aname_email" "$aname_comment" "$aexpiry_date" \
                        "$apassphrase"
                    ;;
                add-key|addkey|add-sub|addsub|addsubkey)
                    shift
                    homedir="" name_real="" name_email=""
                    name_comment="" uid="" fingerprint="" key_id=""
                    passphrase="" encrypt="false" sign="false" auth="false"
                    expires="" sub_passphrase=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --index|-i|--idx|-idx) index="$2"; shift 2;;
                            --home|--homedir) homedir="$2"; shift 2;;
                            --name|-n) name_real="$2"; shift 2;;
                            --email|-e|--mail) name_email="$2"; shift 2;;
                            --comment|-c) name_comment="$2"; shift 2;;
                            --uid) uid="$2"; shift 2;;
                            --fingerprint|--fp|-fp) fingerprint="$2"; shift 2;;
                            --key-id|--keyid|--kid|-kid) key_id="$2"; shift 2;;
                            --passphrase|--pass|--pass*file|-p|--pf|-pf) passphrase="$2"; shift 2;;
                            --subpassphrase|--subpass|--subpass*file|-sp|--spf|-spf) sub_passphrase="$2"; shift 2;;
                            --encrypt|--enc) encrypt="true"; shift;;
                            --sign) sign="true"; shift;;
                            --auth) auth="true"; shift;;
                            --expires) expires="$2"; shift 2;;
                            -h|--help|-help) shorthelp "gpg addkey"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "gpg addkey"; exit 1;;
                        esac
                    done
                    gpg_create_subkey \
                        "$homedir" "$name_real" \
                        "$name_email" "$name_comment" \
                        "$uid" "$fingerprint" \
                        "$key_id" "$passphrase" \
                        "$encrypt" "$sign" \
                        "$auth" "$index" \
                        "$expires" "$sub_passphrase"
                    ;;

                sign-pkgbuild)
                    shift
                    path_to_file=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --file|-f) path_to_file="$2"; shift 2;;
                            -h|--help|-help) shorthelp "gpg sign-pkgbuild"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "gpg sign-pkgbuild"; exit 1;;
                        esac
                    done

                    ;;
                -h|--help|-help|*) echoe "Unknown GPG command: $1"; help; exit 1;;
            esac
            ;;
        secboot|secureboot|secure-boot|sec-boot|sb|sboot)
            shift
            case "$1" in
                init)
                    shift
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            -h|--help|-help) shorthelp "secboot init"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "secboot init"; exit 1;;
                        esac
                    done
                    secureboot_init "$"
                    ;;
                verify)
                    shift
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            -h|--help|-help) shorthelp "secboot verify"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "secboot verify"; exit 1;;
                        esac
                    done
                    secureboot_verify "$"
                    ;;
                create-keys|create)
                    shift
                    create=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            -h|--help|-help) shorthelp "secboot create"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "secboot create"; exit 1;;
                        esac
                    done
                    ;;
                load-keys|load)
                    shift
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            -h|--help|-help) shorthelp "secboot load"; exit 0;;
                            *) echoe "Unknown option: $1"; shorthelp "secboot load"; exit 1;;
                        esac
                    done
                    ;;
                -h|--help|-help|*) echoe "Unknown ISO command: $1"; help; exit 1;;
            esac
            secboot
            ;;
        ssh)
            shift
            case "$1" in
                tunnel|tun)
                    shift
                    lhost="" lport=""
                    while [ $# -gt 0 ]; do
                        case "$1" in
                            --lhost) lhost="$2"; shift 2;;
                            --lport) lport="$2"; shift 2;;
                        esac
                    done
                    ;;
                -h|--help|-help|*) echoe "Unknown SSH command: $1"; help; exit 1;;
            esac
            ;;
        --cleanup|cleanup)
            shift
            cleanup_index="" cleanup_non_ca_keys="false"
            cleanup_orphaned="false" cleanup_backups="false"
            cleanup_dry_run="false" cleanup_keep_backups="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --index) cleanup_index="$2"; shift 2;;
                    --nonca) cleanup_non_ca_keys="true"; shift;;
                    --orphaned) cleanup_orphaned="true"; shift;;
                    --backups) cleanup_backups="true"; shift;;
                    --dry*run) cleanup_dry_run="true"; shift;;
                    --keep*bkps) cleanup_keep_backups="true"; shift;;
                    -h|--help|-help) shorthelp "cleanup"; exit 0;;
                    *) echoe "Unknown option: $1"; shorthelp "cleanup"; exit 1;;
                esac
            done
            cleanup_dcrypto_files "$cleanup_index" "$cleanup_orphaned" \
                "$cleanup_backups" "$cleanup_non_ca_keys" \
                "$cleanup_dry_run" "$cleanup_keep_backups"
            ;;

        # Maintenance and utility commands
        --show-index|show-index)
            shift
            show_keys="false"
            show_ca="false"
            json_output="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --keys) show_keys="true"; shift;;
                    --ca) show_ca="true"; shift;;
                    --json) json_output="true"; shift;;
                    -help|--help|-h) shorthelp "show-index"; exit 0;;
                    *) echo "Unknown option: $1"; shorthelp "ssl $0"; exit 1;;
                esac
            done
            show_index "$show_keys" "$show_ca" "$json_output"
            ;;

        --backup|backup)
            shift
            backup_output=""
            backup_compress="false"
            backup_exclude_keys="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --out) backup_output="$2"; shift 2;;
                    --compress|-z) backup_compress="true"; shift;;
                    --exclude-keys) backup_exclude_keys="true"; shift;;
                    -help|--help|-h) shorthelp "backup"; exit 0;;
                    *) echoe "Unknown option: $1"; shorthelp "backup"; exit 1;;
                esac
            done
            backup_dcrypto "$backup_output" "$backup_compress" "$backup_exclude_keys"
            ;;

        --restore|restore)
            shift
            restore_from=""
            restore_force="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --from) restore_from="$2"; shift 2;;
                    --force) restore_force="true"; shift;;
                    -help|--help|-h) shorthelp "restore"; exit 0;;
                    *) echoe "Unknown option: $1"; shorthelp "restore"; exit 1;;
                esac
            done
            restore_dcrypto "$restore_from" "$restore_force"
            ;;

        --reset-dystopian-crypto|reset-dystopian-crypto|--reset-dcrypto|reset-dcrypto)
            shift
            reset_ssl="false"
            reset_gpg="false"
            while [ $# -gt 0 ]; do
                case "$1" in
                    --all|-a) reset_ssl="true"; reset_gpg="true"; shift;;
                    --ssl|-s) reset_ssl="true"; shift;;
                    --gpg|-g) reset_gpg="true"; shift;;
                    -help|--help|-h) shorthelp "reset-dcrypto"; exit 0;;
                    *) echoe "Unknown option: $1"; shorthelp "reset-dcrypto"; exit 1;;
                esac
            done
            reset_dcrypto "$reset_ssl" "$reset_gpg"
            exit 0
            ;;

        --version|version|-V)
            echos "dystopian-crypto v$VERSION"
            echos "A POSIX shell script for managing SSL certificates and GPG keys"
            ;;

        -h|--help|-help) help; exit 0;;
        *) echoe "Unknown command: $1"; help; exit 1;;
    esac
}

main "$@"